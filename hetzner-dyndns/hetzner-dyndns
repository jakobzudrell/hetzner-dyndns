#!/usr/bin/python3


## Imports
import os
import json
import requests
import logging
import logging.handlers
import argparse
import smtplib
import ssl
import ruamel.yaml as yaml
from datetime import datetime

##
## Script exit function
##
def exit_script(message):
   
    try:
        requests.post(config["hooks"]["healthchecks"] + "/fail", data=message, timeout=10)
    except requests.RequestException as e:
        print(f"Ping failed: {e}")
    except Exception as e:
        print(f"Error: {e}")
        

    exit()


def main():
    ##
    ## Parse arguments
    ##
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c",
        "--configFile",
        default="conf.yaml",
        help="Set the config file location")

    options = parser.parse_args()

    ##
    ## Configuration
    ##
    configFile = options.configFile

    # Check if we have a valid file given
    if not os.path.exists(configFile):
        print(f"Invalid config file location '{configFile}'. Terminating script!")
        exit()


    with open(configFile, "r") as configFile:
        global config
        config = yaml.safe_load(configFile)

    ##
    ## Send start signal
    ##
    try:
        requests.get(config["hooks"]["healthchecks"] + "/start", timeout=10 )
    except requests.RequestException:
        pass


    ##
    ## Main
    ##

    # Get the public IP
    request = requests.get("http://icanhazip.com")

    # Outupt an error if getting the public IP failed
    if request.status_code != 200:
        exit_script(f"GET icanhazip.com failed with code {request.status_code}")

    # Read our public IP
    publicIp = request.text.strip()

    # Create our PUT request
    headers = { "Content-Type": "application/json", "Auth-API-Token": config['api']['api_key']  }

    updatedRecords = []
    for updatedRecord in config['api']['records']:
        updatedRecord["zone_id"] = config['api']['zone_id']
        updatedRecord["value"] = publicIp
        updatedRecords.append(updatedRecord)

    payload = '{ "records": ' + json.dumps(updatedRecords) + "}"

    # Send our PUT request
    apiPostRequest = requests.put(
        config['api']['base_url'] + "/records/bulk",
        data=payload,
        headers=headers)

    # Check for a 200 response
    if apiPostRequest.status_code != 200:
        exit_script(f"PUT request returned code '{apiPostRequest.status_code}': {apiPostRequest.text.rstrip()}")


    # Check if any records failed
    failedRecords = "Failed Records:"
    succeededRecords = "Succeeded Records:"
    response = json.loads(apiPostRequest.text)

    for failedRecord in response['failed_records']:
        failedRecords += f"\n - '{failedRecord['name']}' with ID '{failedRecord['id']}'"

    for succeededRecord in response["records"]:
        succeededRecords += f"\n - '{succeededRecord['name']}' with ID '{succeededRecord['id']}'"



    # Exit with warning if some records failed
    if len(response['failed_records']) > 0:
        exit_script(failedRecords + "\n\n" + succeededRecords)

    ##
    ## Script successfully finished
    ##
    try:
        requests.get(config["hooks"]["healthchecks"], data=f"All records updated. Public IP: {publicIp}\n\n{succeededRecords}", timeout=10 )
    except requests.RequestException:
        pass    

# Call our main function
if __name__ == "__main__":
    main()